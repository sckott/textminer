#!/usr/bin/env ruby

require "thor"

class Tm < Thor
  include Thor::Actions
  require 'textminer'
  require 'launchy'
  require 'json'
  require 'pp'

  desc "links STRING", "Get links meant for text mining"
  # method_options :doi => :boolean
  def links(tt)
  	tt = "#{tt}"
    tt = tt.to_s.split(',')
    out = Textiner.links(tt)
    puts out
  end

#   desc "search STRING", "Search for articles via query string or DOI"
#   method_option :doi, :default => nil
#   method_option :page, :default => nil
#   method_option :rows, :default => nil
#   method_option :sort, :default => nil
#   method_option :year, :default => nil
#   def search(tt)
#     tt = "#{tt}"
#     say "Searching with query \'#{tt}\'", :blue
#     out = Cites.search(tt, options)

#     # Don't use meta for anything for now
#     items = out["items"]
#     # Restrict output to number of rows fetched even if more was returned
#     rows = options['rows'].to_i - 1
#     for item in items[0..rows]
#       puts "\n"
#       puts "  Title: #{item['title']}"
#       puts "  Year: #{item['year']}"
#       puts "  Normalized score: #{item['normalizedScore']}"
#       puts "  DOI: #{item['doi']}"
#     end

#     # puts "#{tt}"
#     # puts opts["doi"] ? out['doi'] : out
#   end

#   desc "get citation", "Get a citation from a DOI"
#   method_option :format, :default => 'text'
#   method_option :style, :default => 'apa'
#   method_option :locale, :default => 'en-US'
#   method_option :cache, :default => true
#   def get(tt)
#   	tt = "#{tt}"
#   	# puts tt.to_s
#   	tt = tt.to_s.split(',')
#   	# puts tt
#     begin
#       out = Cites.doi2cit(tt, options[:format], options[:style],
#                           options[:locale], options[:cache])
#     rescue Exception => e
#       abort(e.message)
#     end

#     say "Found #{out.length} " + (out.length > 1 ? "matches" : "match"), :green
#     for entry in out
#       if ['citeproc-json'].include? options['format']
#         pp entry
#       else
#         puts entry
#       end
#     end

#   end

#   desc "launch paper", "Open a paper from a given DOI in your default browser"
#   method_option :oa, :type => :boolean, :default => 'true'
#   def launch(doi)
#     if options[:oa]
#       url = "http://macrodocs.org/?doi=" + doi
#       Launchy.open(url)
#     else
#       url = "http://dx.doi.org/" + doi
#       Launchy.open(url)
#     end
#   end
# end

Tm.start(ARGV)
